"Ben McCormick's vimrc

" Use vim rather than vi settings
set nocompatible
" Set shell to zsh (fish and VIM don't play well together)
set shell=zsh

"Setup Vundle For Package Management

"Vundle begins here, turn off filetype temporarily
filetype off
set rtp+=~/.vim/bundle/vundle/
call vundle#begin()
Plugin 'gmarik/vundle'

"My bundles

" Themes
Plugin 'altercation/vim-colors-solarized'
Plugin 'chriskempson/base16-vim'

" Syntax
Plugin 'groenewege/vim-less'
Plugin 'skammer/vim-css-color'
Plugin 'kchmck/vim-coffee-script'
Plugin 'plasticboy/vim-markdown'
Plugin 'jelera/vim-javascript-syntax'
Plugin 'dag/vim-fish'
Plugin 'elzr/vim-json'
Plugin 'mustache/vim-mustache-handlebars'
Plugin 'lepture/vim-jinja'

" Functionality

" ### Indispensable

" ctrlp is file fuzzy search
Plugin 'kien/ctrlp.vim'
" Ack.vim uses ack to search within files
Plugin 'mileszs/ack.vim'
"Airline provides a stylish appearance for the styleline
Plugin 'bling/vim-airline'
" Syntastic provides syntax info
Plugin 'scrooloose/syntastic'
"Show git info in the gutter, sad that it and syntastic fight for space though
Plugin 'airblade/vim-gitgutter'
"Integrate with tmux
Plugin 'christoomey/vim-tmux-navigator'

" ### Use sometimes

" Nerdtree provides a file explorer, which is sometimes useful.
" Mostly ctrlp handles file finding though
Plugin 'scrooloose/nerdtree'
" fugitive provides git bindings in Vim.  Don't use too much, but useful for
" blame
Plugin 'tpope/vim-fugitive'
" Surround is useful for adding surrounding tags to elements (especially html)
Plugin 'tpope/vim-surround'
" Allows vim-surround to be used with . command
Plugin 'tpope/vim-repeat'
"Gives smart completions for Javascript
Plugin 'marijnh/tern_for_vim'
" Provides easy shortcuts for commenting out lines
Plugin 'scrooloose/nerdcommenter'
" Great helpful autocompletion
Plugin 'Valloric/YouCompleteMe'

" Experimenting withthese

Plugin 'rizzatti/dash.vim'
Plugin 'Lokaltog/vim-easymotion'
Plugin 'Raimondi/delimitMate'
Plugin 'SirVer/ultisnips'
Plugin 'tpope/vim-unimpaired'
Plugin 'terryma/vim-smooth-scroll'

"End Vundle
call vundle#end()
"Vundle ended so reenable filetypes
filetype plugin indent on

"Pull in matchit.vim, which is already bundled with Vim
runtime! macros/matchit.vim


" Appearance
" ========

"We want syntax highlighting in 256 colors
syntax on
syntax enable
set t_Co=256
" Use base-16 for the color scheme, different themes in GUI and terminal
if has('gui_running')
colorscheme base16-flat
set background=dark
else
let base16colorspace=256  " Access colors present in 256 colorspace
colorscheme base16-eighties
set background=dark
endif
"Use Source Code Pro for the font
set guifont=Source\ Code\ Pro\ For\ Powerline:h12

" General Config
" ==============


let mapleader='\'               " I just use the default Leader
set encoding=utf-8
set number
set backspace=indent,eol,start  " Allow backspace in insert mode
set history=1000                " Store lots of :cmdline history
set showcmd                     " Show incomplete cmds down the bottom
set gcr=a:blinkon0              " Disable cursor blink
set autoread                    " Reload files changed outside vim
set laststatus=2                " Always show status line
set hidden                      " Buffers can exist in the background
set splitright                  " Opens vertical split right of current window
set splitbelow                  " Opens horizontal split below current window
set shortmess=filnxtToOI       " see :help shortmess

" Mouse
" ======

" Send more characters for redraws
set ttyfast
" Enable mouse use in all modes
set mouse=a
" Set this to the name of your terminal that supports mouse codes.
" Must be one of: xterm, xterm2, netterm, dec, jsbterm, pterm
set ttymouse=xterm2


" Search Settings
" ===============

set incsearch        " Find the next match as we type the search
set hlsearch         " Highlight searches by default
set viminfo='100,f1  " Save up to 100 marks, enable capital marks

" Turn Off Swap Files
" ===================

set noswapfile
set nobackup
set nowritebackup
set backupdir=~/.vim-tmp,~/.tmp,~/tmp,/var/tmp,/tmp
set directory=~/.vim-tmp,~/.tmp,~/tmp,/var/tmp,/tmp

" Persistent Undo
" ===============

" Keep undo history across sessions, by storing in file
" Only works in MacVim (gui) mode
if has('gui_running')
  set undodir=~/.vim/backups
  set undofile
endif

" Indentation and Display
" =======================

" We want to replace tabs with spaces and have 4 space width indentation
set autoindent
set smartindent
set smarttab
set shiftwidth=4
set softtabstop=4
set tabstop=4
set expandtab

set list listchars=tab:\ \ ,trail:Â·   " Display tabs and trailing spaces visually
set nowrap                            " Don't wrap lines

" Folds
" =====

set foldmethod=indent   " Fold based on indent
set foldnestmax=3       " Deepest fold is 3 levels
set nofoldenable        " Don't fold by default

" Completion
" ==========

"set wildmode=list:longest
set wildmode=longest,list,full
set wildmenu                    " Enable ctrl-n and ctrl-p to scroll thru matches
set wildignore=*.o,*.obj,*~     " Stuff to ignore when tab completing
set wildignore+=*vim/backups*

" Scrolling
" =========

" Start scrolling when we're getting close to margins
set scrolloff=10
set sidescrolloff=15
set sidescroll=1

" Status Line
" ===========

set statusline=                                 " Override default
set statusline+=%{fugitive#statusline()[4:-2]}  " Show fugitive git info
set statusline+=\ %f\ %m\ %r                    " Show filename/path
set statusline+=%=                              " Set right-side status info after this line
set statusline+=%l/%L:%v                        " Set <line number>/<total lines>:<column>
set statusline+=\                               " Set ending space
set noshowmode                                  " Let powerline handle the mode display

"Custom commands

"Let K be the opposite of J
map K i<Enter><Esc>

"Plugin Options


" CTRL+P options

let g:ctrlp_custom_ignore = {
    \ 'file': '\.pyc$',
    \ 'dir': 'node_modules\|\.DS_Store$\|\.git$'
    \ }
" Airline options
let g:airline#extensions#tabline#enabled = 1
let g:airline_powerline_fonts = 1

"Markdown options
let g:vim_markdown_folding_disabled=1

"NerdTree Options
map <C-n> :NERDTreeToggle<CR>
let NERDTreeHijackNetrw=1 "Put Nerdtree into a window

"YouCompleteMe options
let g:ycm_min_num_of_chars_for_completion=3

"jinja config
au BufNewFile,BufRead *.html,*.htm,*.shtml,*.stm set ft=jinja

"Utisnips config

"" Trigger configuration. Can't use tab with YouCompleteMe
function! g:UltiSnips_Complete()
    call UltiSnips#ExpandSnippet()
    if g:ulti_expand_res == 0
        if pumvisible()
            return "\<C-n>"
        else
            call UltiSnips_JumpForwards()
            if g:ulti_jump_forwards_res == 0
               return "\<TAB>"
            endif
        endif
    endif
    return ""
endfunction

au BufEnter * exec "inoremap <silent> " . g:UltiSnipsExpandTrigger . " <C-R>=g:UltiSnips_Complete()<cr>"
let g:UltiSnipsJumpForwardTrigger="<tab>"
let g:UltiSnipsListSnippets="<c-e>"

" Edit snippets in a split
let g:UltiSnipsEditSplit='vertical'
"Neocomplete
let g:neocomplete#enable_at_startup = 1

"Smooth Scroll
noremap <silent> <c-u> :call smooth_scroll#up(&scroll, 10, 2)<CR>
noremap <silent> <c-d> :call smooth_scroll#down(&scroll,10, 2)<CR>
noremap <silent> <c-b> :call smooth_scroll#up(&scroll*2, 10, 4)<CR>
noremap <silent> <c-f> :call smooth_scroll#down(&scroll*2, 10, 4)<CR>

"Syntax Specific


"Markdown options
let g:vim_markdown_folding_disabled=1
