snippet bbview
import * as Mn from 'marionette';

let $1 = Mn.$2.extend({

    $0

});

export default $1;
endsnippet

snippet bbcollection
import * as Backbone from 'backbone';

let $1 = Backbone.Collection.extend({
    $0
});

export default $1;
endsnippet

snippet bbmodel
import * as Backbone from 'backbone';

let $1 = Backbone.Model.extend({
    $0
});

export default $1;
endsnippet

snippet viewtest
import * as Mn from 'marionette';
import * as \$ from 'jquery';
$2

describe('$1', function() {
    let view, region, model;

    /* Setup And Teardown */
    beforeEach(function() {
        //setup view
        model = new $3();
        view = new $4({
            model,
        });

        //setup region and show view
        \$('body').append('<div class="view-test">');
        region = new Mn.Region({el: '.view-test'});
        region.show(view);
    });

    afterEach(function() {
        model.destroy();
        view.destroy();
        \$('view-test').remove();
    });

    /* basic existence tests */

    it('can be instantiated and added to the DOM', function() {
        expect(view).toBeDefined();
        //is a view?
        expect(view.render).toBeDefined();
        //did it end up in the DOM?
        expect(view.\$el).toBeDefined();
    });

	$0
    /* DOM Events and their callbacks */

    /* Interaction with the model/collection */

    /* Functional DOM Changes */

    /* Radio Events and control flow */

});
endsnippet

snippet modeltest
$0

describe('$1', function() {
    let model;

    /* Setup And Teardown */
    beforeEach(function() {

    });

    afterEach(function() {
        model.destroy();
    });

    /* defaults and methods */

    /* validation process */

    /* Control Flow */

    /* Events and callbacks */

});
endsnippet

snippet collectiontest
import $2 from '$3';

describe('$1', function() {
    let collection;

    /* Setup And Teardown */
    beforeEach(function() {
        collection = new $2();
    });

    afterEach(function() {
        collection.each((_model) => {
			_model.destroy();
		});
    });

    /* defaults and methods */

    /* validation process */

    /* Control Flow */

    /* Events and callbacks */

});
endsnippet

snippet componenttest
import * as $ from 'jquery';
/* eslint-disable */
import * as sideeffects from 'components/$1'; 
/* eslint-enable */

describe('$2 Component', function() {
    let component;
    /* Setup And Teardown */
    beforeEach(function() {

        component = $('<wc-$3 class="test-$3"></wc-$3>');
        $('body').append()
    });

    afterEach(function() {
        $('wc-$3').remove();
    });

    /* basic existence & initialization tests: does it start in the right state */

    it('can be instantiated and added to the DOM', function() {
        let \$$4 = $('.test-$3');
        expect(\$$4.length).toBe(1);
    });

    /* Argument tests: What happens when an argument changes or is initialized*/
    $0

    /* Event tests: Do the correct events fire after change? Does the component respond to events?*/

});
endsnippet

snippet behaviortest
import * as Mn from 'marionette';
import * as \$ from 'jquery';
import * as $2 from '$3';

describe('$1', function() {
    let view, region;

    /* Setup And Teardown */
    beforeEach(function() {
        let View = Mn.ItemView.extend({
            template:false,
            behaviors: {
                behaviorToTest: {
                    behaviorClass: $2,
                }
            }
        });
        //setup view
        view = new View();

        //setup region and show view
        \$('body').append('<div class="view-test">');
        region =  new Mn.Region({el:'.view-test'});
        region.show(view);
    });

    afterEach(function() {
        view.destroy();
        \$('view-test').remove();
    });

    /* basic existence tests */

    it('a view using it can be instantiated and added to the DOM', function() {
        expect(view).toBeDefined();
        //did it end up in the DOM?
        expect(view.\$el).toBeDefined();
    });

	$0

    /* DOM Events and their callbacks */

    /* Interaction with the model/collection */

    /* Functional DOM Changes */

    /* Radio Events and control flow */

});
endsnippet
